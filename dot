#!/usr/bin/env bash
DOT_HOME="$HOME/.dotfiles"

usage() {
    echo
    echo "Usage: $0 OPTION"
    echo "  OPTION:"
    echo "    - [init|install]: install dotfiles to the system"
    echo "    - update: pull and apply new change from the git repo"
    echo "    - update-log: view update log"
    echo "    - push: push local change to github"
    echo "    - pull: pull change from github"
    echo "    - sync: sync with the remote repo"

    exit 1
}

success() {
    # shellcheck disable=SC2059
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
    # shellcheck disable=SC2059
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

install_requirements() {
    echo ">> installing the predefined packages"
    sudo apt update >/dev/null 2>&1
    sudo apt auto-remove -qqy >/dev/null 2>&1

    while IFS="" read -r p || [ -n "$p" ]; do
        if "$DOT_HOME/bin/package_installer" "$p" >/dev/null 2>&1; then
            success "$p"
        else
            fail "$p"
        fi
    done <"$HOME"/.dotfiles/requirements.txt

}

install_carlos_dotfiles() {
    echo ""
    echo ">> installing carlo dotfiles"
    "$DOT_HOME/script/bootstrap"
}

init() {
    echo ""
    echo ">>> Installing dotfiles to $HOME/.dotfiles"

    install_requirements
    install_carlos_dotfiles
}

update() {
    echo ""
    echo ">>> Updating dotfile"
    # shellcheck disable=SC1090
    . ~/.dotfiles/bin/dot_update

    echo "<<< dotfile has been updated"
}

show_update_log() {
    less ${TMPDIR:-/tmp}/dot_update.log
}

push() {
    cd ~/.dotfiles && git add -u . && git commit -m "sync" && git push --quiet
}

pull() {
    cd ~/.dotfiles || return 1
    git stash --quiet
    git pull
    git stash pop --quiet
}

# ENTRY POINT
set -e

if [ $# -eq 1 ]; then
    case "$1" in
    init) init ;;
    install) init ;;
    update) update ;;
    update-log) show_update_log ;;
    push) push ;;
    pull) pull ;;
    sync) pull && push ;;
    st) cd ~/.dotfiles && git status ;;
    diff) cd ~/.dotfiles && git diff ;;
    stash) cd ~/.dotfiles && git stash list ;;
    *) usage ;;
    esac
else
    usage
fi
