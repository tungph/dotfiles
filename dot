#!/usr/bin/env bash
DOT_HOME="$HOME/.dotfiles"

usage() {
    echo
    echo "Usage: $0 OPTION"
    echo "  OPTION:"
    echo "    - [init|install]: install dotfiles to the system"
    echo "    - update: pull and apply the new change from the git repo"
    echo "    - update-log: view update log"
    echo "    - push: push local change to github"
    echo "    - pull: pull change from github"
    echo "    - st: view the status of the local repo"
    echo "    - diff: show detail change in the local repo"

    exit 1
}

info() {
    # shellcheck disable=SC2059
    printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

stall() {
    # shellcheck disable=SC2059
    printf "\r  [ \033[00;34m  \033[0m ] $1"
}

success() {
    # shellcheck disable=SC2059
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
    # shellcheck disable=SC2059
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

install_requirements() {
    echo ">> installing the predefined packages"

    stall "apt update" && sudo apt update >/dev/null 2>&1 && info "apt update"
    stall "apt auto-remove" && sudo apt auto-remove -qqy >/dev/null 2>&1 && info "apt auto-remove"

    while IFS="" read -r p || [ -n "$p" ]; do
        stall "$p"

        if "$DOT_HOME/bin/package_installer" "$p" >"${TMPDIR:-/tmp}/dotfiles_$USER.log" 2>&1; then
            success "$p"
        else
            fail "$p"
        fi
    done <"$HOME"/.dotfiles/bundles.txt

}

install_carlos_dotfiles() {
    echo ""
    echo ">> installing carlo dotfiles"
    "$DOT_HOME/script/bootstrap"
}

init() {
    echo ""
    echo ">>> Installing dotfiles to $HOME/.dotfiles"

    install_requirements
    install_carlos_dotfiles
}

update() {
    echo ""
    echo ">>> Updating dotfile"
    # shellcheck disable=SC1090
    . ~/.dotfiles/bin/dot_update

    echo "<<< dotfile has been updated"
}

show_update_log() {
    less "${TMPDIR:-/tmp}/dotfiles_$USER.log"
}

push() {
    cd ~/.dotfiles && git add -u . && git commit -m "sync" && git push --quiet
}

pull() {
    cd ~/.dotfiles || return 1
    git stash --quiet
    git pull
    git stash pop --quiet
}

# ENTRY POINT
if [ $# -eq 1 ]; then
    case "$1" in
    init) init ;;
    install) init ;;
    update) update ;;
    update-log) show_update_log ;;
    push) push ;;
    pull) pull ;;
    st) cd ~/.dotfiles && git status -s ;;
    diff) cd ~/.dotfiles && git diff ;;
    stash) cd ~/.dotfiles && git stash list ;;
    e) charm ~/.dotfiles ;;
    code) code ~/.dotfiles ;;
    *) usage ;;
    esac
else
    usage
fi
