;; edn spec https://github.com/edn-format/edn
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md
;;https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
{;; !    | means mandatory
;; #  | means optional
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any

;; to understand better how modifiers work in karabiner
;; https://pqrs.org/osx/karabiner/json.html#from-event-definition-modifiers

;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; need to prefix C T O S F with ! or #

  :profiles
  {:goku {:default true
          :sim     50
          ;; simultaneous_threshold_milliseconds (def: 50)
          ;; keys need to be pressed within this threshold to be considered simultaneous
          :delay   0
          ;; to_delayed_action_delay_milliseconds (def: 500)
          ;; time after which the key press is delayed
          :alone   85
          ;; to_if_alone_timeout_milliseconds (def: 1000)
          ;; hold for .. ms to register single tap
          :held    500
          ;; to_if_held_down_threshold_milliseconds (def: 500)
          ;; key is fired twice when 500ms is elapsed (otherwise seen as a hold command)
          }}
  :templates    {:alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
                 :open   "open \"%s\""}
  :applications {:firefox   ["^org\\.mozilla.*"]
                 :jetbrains ["^com\\.jetbrains.*"]
                 :finder    ["^com\\.apple\\.finder$"]
                 :terminals ["com\\.apple\\.Terminal",
                             "com\\.googlecode\\.iterm2"]}
  :layers       {:hyper-mode {:key :caps_lock :alone {:key :escape}}}
  :simlayers    {:tab-mode      {:key :tab}
                 ;                 :a-mode        {:key :a}
                 ;                 :s-mode        {:key :s}
                 :spacebar-mode {:key :spacebar}}
  :main         [;; each manipulator has a description and multiple rules

                ;;{:des "..."                               ;; -> description
                ;; :rules[
                ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
                ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
                ;; ]}

                ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
                ;;       |_____| |_______________| |_| |_________________________________________|
                ;;        <from>    <to>      <conditions>         <other options>
                ;;
                ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
                ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
                ;;

                ;; (custom variables) & modifiers -> Advanced
                ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable
                  {:des   "caps lock -> ESCAPE if alone else HYPER"
                   :rules [[:##caps_lock :!CTOleft_shift nil {:alone :escape}]
                           [:!Rcaps_lock :!Rgrave_accent_and_tilde]
                           [:!Ccaps_lock :grave_accent_and_tilde]]}

                  {:des   "spacebar layer"
                   :rules [:spacebar-mode
                           ;; increamental select
                           [:i :!Oup_arrow [:jetbrains]]
                           [:u :!S5 [:jetbrains]]
                           [:o :!Cdelete_or_backspace [:jetbrains]]
                           [:j :!Sclose_bracket [:jetbrains]]
                           [:k :!Sopen_bracket [:jetbrains]]
                           [:quote :equal_sign [:jetbrains]]

                           ;; abort
                           [:u :!Tc]
                           ;; save
                           [:return_or_enter :!Cs]
                           ;; save as
                           [:!Treturn_or_enter :!CSs]

                           [:o :delete_or_backspace]

                           ;; movement
                           [:g :home]
                           [:semicolon :end]
                           [:j :down_arrow]
                           [:k :up_arrow]
                           [:l :!Oright_arrow]
                           [:h :!Oleft_arrow]]}]}
