;; edn spec https://github.com/edn-format/edn
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
{;; !    | means mandatory
;; #  | means optional
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any

;; to understand better how modifiers work in karabiner
;; https://pqrs.org/osx/karabiner/json.html#from-event-definition-modifiers

;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; need to prefix C T O S F with ! or #

  :profiles
  {:goku {:default true
          :sim     50
          ;; simultaneous_threshold_milliseconds (def: 50)
          ;; keys need to be pressed within this threshold to be considered simultaneous
          :delay   0
          ;; to_delayed_action_delay_milliseconds (def: 500)
          ;; time after which the key press is delayed
          :alone   200
          ;; to_if_alone_timeout_milliseconds (def: 1000)
          ;; hold for .. ms to register single tap
          :held    500
          ;; to_if_held_down_threshold_milliseconds (def: 500)
          ;; key is fired twice when 500ms is elapsed (otherwise seen as a hold command)
          }}
   :templates {:launch     "osascript -e 'tell application \"Alfred 4\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
               :alf        "open /Applications/Alfred\\ 4.app && osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\"'"
               :km         "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
               :kb-maestro "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
               :open       "open \"%s\""
               :opena      "open -a \"%s\""
               :show       "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
               :toggle     "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
               :type       "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
               ;; :focus      "/usr/local/bin/yabai -m display --focus \"%s\" & /usr/local/bin/yabai -m space --focus \"%s\""
               }
  :applications {:firefox   ["^org\\.mozilla.*"]
                 :edge      ["^com\\.microsoft\\.edgemac"]
                 :jetbrains ["^com\\.jetbrains.*"]
                 :finder    ["^com\\.apple\\.finder$"]
                 :terminals ["com\\.apple\\.Terminal",
                             "com\\.googlecode\\.iterm2"]}
  :layers       {:caps-layer {:key :caps_lock :alone {:key :escape}}
                 :tab-layer {:key :tab :alone {:key :left_control} }
                 :space-layer {:key :spacebar }}
  :main [
      {:des   "Tab layer"
       :rules [:tab-layer
          [:q :!Ctab] [:w :!CStab] [:e [:toggle "pycharm"]] [:r [:opena "iTerm"]]
          [:u :!Oup_arrow [:jetbrains]] [:i :!Sequal_sign] [:o :hyphen]

          [:d [:opena "finder"]] [:f :!TCf]
          [:h :delete_or_backspace] [:j :!Sopen_bracket] [:k :!Sclose_bracket] [:l :!S8] [:semicolon :!S5] [:quote :equal_sign]
          [:n :!S1] [:m :!Shyphen]

          [:spacebar [:opena "firefox"]]
       ]}

      {:des   "CapsLock layer"
       :rules [:caps-layer
            [:spacebar :!Sspacebar [:jetbrains]] ;; go to next problem
            [:return_or_enter :!Cs] ;; control + s
            [:!Creturn_or_enter :!CSs] ;; control + shift + s
       ]}

       {:des    "Space layer"
        :rules [:space-layer
             [:w :!S8] [:e :!S5] [:i :!Sequal_sign] [:o :hyphen]
             [:a :1] [:s :2] [:d :3] [:f :4] [:g :5] [:h :6] [:j :7] [:k :8] [:l :9] [:semicolon :0] [:quote :equal_sign]
             [:c :!Tc] [:n :!S1] [:m :!Shyphen]
        ]}

      {:des   "Personal Shortcuts"
       :rules [
            [:!Sspacebar :!Oright_arrow] [:!CSspacebar :!Oleft_arrow]
            [:!Creturn_or_enter :up_arrow] [:!CSreturn_or_enter :down_arrow]
            [:!Sreturn_or_enter :end]

            [:!Rcaps_lock :!Rgrave_accent_and_tilde] [:!Ccaps_lock :grave_accent_and_tilde]

            [:quote :!Cf [:firefox]]
            [:quote :!Cf [:edge]]
            [:!Sright_shift :!TCf]
       ]}
  ]}
