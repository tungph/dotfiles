;; edn spec https://github.com/edn-format/edn
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md
;;https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
{;; !    | means mandatory
;; #  | means optional
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any

;; to understand better how modifiers work in karabiner
;; https://pqrs.org/osx/karabiner/json.html#from-event-definition-modifiers

;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; need to prefix C T O S F with ! or #

  :profiles
  {:goku {:default true
          :sim     50
          ;; simultaneous_threshold_milliseconds (def: 50)
          ;; keys need to be pressed within this threshold to be considered simultaneous
          :delay   0
          ;; to_delayed_action_delay_milliseconds (def: 500)
          ;; time after which the key press is delayed
          :alone   300
          ;; to_if_alone_timeout_milliseconds (def: 1000)
          ;; hold for .. ms to register single tap
          :held    500
          ;; to_if_held_down_threshold_milliseconds (def: 500)
          ;; key is fired twice when 500ms is elapsed (otherwise seen as a hold command)
          }}
  :templates    {:alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
                 :open   "open \"%s\""}
  :applications {:firefox   ["^org\\.mozilla.*"]
                 :jetbrains ["^com\\.jetbrains.*"]
                 :finder    ["^com\\.apple\\.finder$"]
                 :terminals ["com\\.apple\\.Terminal",
                             "com\\.googlecode\\.iterm2"]}
  :layers       {:hyper-mode {:key :caps_lock :alone {:key :escape}}
                 :tab-mode   {:key :tab}}

  :main         [;; each manipulator has a description and multiple rules

                ;;{:des "..."                               ;; -> description
                ;; :rules[
                ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
                ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
                ;; ]}

                ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
                ;;       |_____| |_______________| |_| |_________________________________________|
                ;;        <from>    <to>      <conditions>         <other options>
                ;;
                ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
                ;; <other options> includes ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
                ;;

                ;; (custom variables) & modifiers -> advanced
                ;; https://github.com/yqrashawn/gokurakujoudo/blob/master/examples.org#custom-variable
                  {:des   "Tab layer"
                   :rules [:tab-mode
                         [:q :!Ctab] [:j :!Ctab]
                         [:w :!CStab] [:k :!CStab]
                   ]}

                  {:des   "CapsLock layer"
                   :rules [:hyper-mode
                        ;; Jetbrains specific
                        [:v :!Oup_arrow [:jetbrains]] ;;extended select
                        [:spacebar :!Sspacebar [:jetbrains]]

                        [:q :1] [:w :2] [:e :3] [:r :4] [:t :5] [:y :6] [:u :7] [:i :8] [:o :9] [:p :0]

                        ;; a s d f g h
                        ;; [ { ( ) } ]
                        [:a :open_bracket] [:s :!Sopen_bracket] [:d :!S9] [:f :!S0] [:g :!Sclose_bracket] [:h :close_bracket]

                        ;; j k l ; '
                        ;; + - * % =
                        [:j :!Sequal_sign] [:k :hyphen] [:l :!S8 ] [:semicolon :!S5 ] [:quote :equal_sign]

                        [:c :!S1] [:m :!Shyphen];; c->! m->_
                        [:v :home] [:n :delete_or_backspace]

                        ;; Save and save-as
                        [:return_or_enter :!Cs]
                        [:!Creturn_or_enter :!CSs]

                   ]}

                  {:des   "Personal Shortcuts"
                   :rules [
                        [:!Sspacebar :!Oright_arrow]
                        [:!CSspacebar :!Oleft_arrow]
                        [:!Creturn_or_enter :up_arrow]
                        [:!CSreturn_or_enter :down_arrow]
                        [:!Sreturn_or_enter :end]

                        [:!Rcaps_lock :!Rgrave_accent_and_tilde]
                        [:!Ccaps_lock :grave_accent_and_tilde]

                        [:quote :!Cf [:firefox]]
                        [:!Rshift :!CTf]
                   ]}
  ]}
